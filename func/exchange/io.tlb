bool_false$0 = Bool;
bool_true$1 = Bool;
bit$_ (## 1) = Bit;
//
nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;
left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;
//
var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
nanocoins$_ amount:(VarUInteger 16) = Coins;
//
addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len)
             = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;
_ _:MsgAddressExt = MsgAddress;

// HASHMAP
hm_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n)
          {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;

hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X)
           right:^(Hashmap n X) = HashmapNode (n + 1) X;

hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m;
hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;

unary_zero$0 = Unary ~0;
unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);

hme_empty$0 {n:#} {X:Type} = HashmapE n X;
hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;


tail#_ {bn:#} b:(bits bn) = SnakeData ~0;
cons#_ {bn:#} {n:#} b:(bits bn) next:^(SnakeData ~n) = SnakeData ~(n + 1);
chunked_data#_ data:(HashmapE 32 ^(SnakeData ~0)) = ChunkedData;

text#_ {n:#} data:(SnakeData ~n) = Text;
snake#00 {n:#} data:(SnakeData ~n) = ContentData;
chunks#01 data:ChunkedData = ContentData;
onchain#00 data:(HashmapE 256 ^ContentData) = FullContent;
offchain#01 uri:Text = FullContent;

//

install#3356dc14 query_id:uint64 = InternalMsgBody;

change_admin#6c2c95a query_id:uint64 admin_address:MsgAddress = InternalMsgBody;

correct_gas_price#2a681c42 query_id:uint64 = InternalMsgBody;

swap_params#_ extract:Bool max_in:Coins min_out:Coins
     destination:MsgAddress error_destination:MsgAddress
     custom_payload:(Maybe ^Cell) = SwapParams;


// swap ton -> jetton
swap_ton#600c00fd query_id:uint64 params:SwapParams  = InternalMsgBody;


// swap jetton -> ton OR jetton -> jetton
swap_jetton#1fb7a25 params:SwapParams = Payload;

set_right_wallet query_id:uint64 jetton_wallet:MsgAddress = InternalMsgBody;

change_meta query_id:uint64 new_meta:^FullContent = InternalMsgBody;

change_admin query_id:uint64 admin_address:MsgAddress = InternalMsgBody;

change_fee_distination query_id:uint64 fee_distination:MsgAddress = InternalMsgBody;

// take_wallet_address#d1735400
set_jetton_wallet#d1735400 query_id:uint64 jetton_wallet:MsgAddress = InternalMsgBody;


// if jetton<->jetton, then just send 2 transactions in turn
add_liquidity#287e167a min_left_amount:Coins min_right_amount:Coins = Payload;


// remove luquidity (user sent)
burn#595f07bc query_id:uint64 amount:(VarUInteger 16)
     response_destination:MsgAddress custom_payload:(Maybe ^Cell)
     = InternalMsgBody;


// remove luquidity (dex receive)
burn_notification#7bdd97de query_id:uint64 amount:(VarUInteger 16)
       sender:MsgAddress response_destination:MsgAddress
       = InternalMsgBody;


// user sent
transfer_jettons#f8a7ea5 query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Payload ^Payload)
           = InternalMsgBody;

// dex receive
transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16)
           sender:MsgAddress forward_payload:(Either Payload ^Payload)
           = InternalMsgBody;
